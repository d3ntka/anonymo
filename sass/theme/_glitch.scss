/* Our mixin positions a copy of our text
directly on our existing text, while
also setting content to the appropriate
text set in the data-text attribute. */
@mixin glitchCopy {
		content: attr(data-text);
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
}
$stroke: 2px;
.glitch {
	position: relative;
	// color: white;
	// font-size: 4em;
	-webkit-text-fill-color: #000;
  -webkit-text-stroke-color: #FFF;
  // -webkit-text-stroke-width: 1px;
	text-shadow: -1px -1px 0 #FFF, 1px -1px 0 #FFF, -1px 1px 0 #FFF, 1px 1px 0 #FFF;
	// letter-spacing: .5em;
	/* Animation provies a slight random skew. Check bottom of doc
	for more information on how to random skew. */
	animation: glitch-skew 3s infinite linear alternate-reverse;

	// Creates a copy before our text.
	&::before{
		// Duplicates our text with the mixin.
		@include glitchCopy;
		// Scoots text slightly to the left for the color offset.
		left: 2px;
		// Creates the color 'shadow' that happens on the glitch.
		text-shadow: -2px 0 #ff00c1;
		/* Creates an initial clip for our glitch. This works in
		a typical top,right,bottom,left fashion and creates a mask
		to only show a certain part of the glitch at a time. */
		clip: rect(44px, 450px, 56px, 0);
		/* Runs our glitch-anim defined below to run in a 5s loop, infinitely,
		with an alternating animation to keep things fresh. */
		animation: glitch-anim 5s infinite linear alternate-reverse;
	}

	// Creates a copy after our text. Note comments from ::before.
	&::after {
		@include glitchCopy;
		left: -2px;
		text-shadow: -2px 0 #00fff9, 2px 2px #ff00c1;
		animation: glitch-anim2 1s infinite linear alternate-reverse;
	}
}

/* Creates an animation with 20 steps. For each step, it calculates
a percentage for the specific step. It then generates a random clip
box to be used for the random glitch effect. Also adds a very subtle
skew to change the 'thickness' of the glitch.*/
@keyframes glitch-anim {
  $steps: 20;
  @for $i from 0 through $steps {
    #{percentage($i*(1/$steps))} {
      clip: rect(random(100)+px, 9999px, random(100)+px, 0);
			transform: skew((random(100) / 100) + deg);
    }
  }
}

// Same deal, just duplicated for ultra randomness.
@keyframes glitch-anim2 {
  $steps: 20;
  @for $i from 0 through $steps {
    #{percentage($i*(1/$steps))} {
      clip: rect(random(100)+px, 9999px, random(100)+px, 0);
			transform: skew((random(100) / 100) + deg);
    }
  }
}

// Does the same deal as before, but now only skews. Used for main text.
@keyframes glitch-skew {
  $steps: 10;
  @for $i from 0 through $steps {
    #{percentage($i*(1/$steps))} {
      transform: skew((random(7) - 5) + deg);
    }
  }
}




.glitch_sygnet {
	// -webkit-filter: url("../glitch.svg#glitch");
	// filter: url("../glitch.svg#glitch");
	-webkit-filter: url("#glitch");
	filter: url("#glitch");
}
.glitch_sygnet img {
	height: auto;
	max-width: 100%;
}

.glitch_this {
	-webkit-filter: url("#glitch");
	filter: url("#glitch");
}
.glitch_this:hover {
	-webkit-filter: none;
	filter: none;
}
.glitch_this img {
	height: auto;
	max-width: 100%;
}

.glitch_link {
  -webkit-filter: none;
  filter: none;
}
.glitch_link:hover {
  -webkit-filter: url("#glitch");
  filter: url("#glitch");
}







// ============== GLITCH =============

.glitch2-wrap{
	width: 100%;
	height: 100%;
	display: flex;
	justify-content: center;
	align-items: center;


  .glitch{
		color: #FFF;
		// -webkit-text-stroke: 1px white
		// text-shadow: -1px -1px 0 #FFF, 1px -1px 0 #FFF, -1px 1px 0 #FFF, 1px 1px 0 #FFF
		-webkit-font-smoothing: antialiased;
		font-weight: 800;
		font-family: 'Raleway';
		position: relative;
		font-size: 100px;
		padding: 30px;
	}

  .glitch::before, .glitch::after{
		padding: 30px;
		color: white;
		content: "";
		position: absolute;
		width: 100%;
		height: 100%;
		background: black;
		overflow: hidden;
		top: 0;

	}

  .glitch::before{
		left: 3px;
		text-shadow: -2px 0 red;
		animation-name: glitch-animation-1;
		animation-duration: 2s;
		animation-timing-function: linear;
		animation-delay: 0s;
		animation-iteration-count: infinite;
		animation-direction: reverse-alternate;
	}

  .glitch::after{
		left: -3px;
		text-shadow: -3px 0 blue;
		animation-name: glitch-animation-2;
		animation-duration: 2s;
		animation-timing-function: linear;
		animation-delay: 0s;
		animation-iteration-count: infinite;
		animation-direction: reverse-alternate;
	}
}
@keyframes glitch-animation-1{
	$steps: 20;
	@for $i from 0 through $steps {
		#{percentage($i*(1/$steps))} {
			clip: rect(random(150)+px, 350px, random(150)+px, 30px)
		}
	}
}

@keyframes glitch-animation-2{
  $steps: 20;
  @for $i from 0 through $steps {
		#{percentage($i*(1/$steps))} {
			clip: rect(random(150)+px, 350px, random(150)+px, 30px)
		}
	}
}


// +++++++++++++++++++++++++++++++++++
